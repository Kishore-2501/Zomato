# -*- coding: utf-8 -*-
"""Zomato.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wAX6tJH87PV70sB_vVwGNFYKUWkFXZ74
"""

!pip install faker
from faker import Faker

import pandas as pd

from faker import Faker
fake = Faker()

from datetime import datetime

import random

fake=Faker(["en_IN"])

customers=[]

for i in range(200):
    customers.append({
        "customer_id": i+1,
        "customer_name": fake.name(),
        "customer_email": fake.email(),
        "customer_phone": fake.phone_number(),
        "location": fake.city(),
        "signup_date": fake.date_this_decade(),
        "is_premium": fake.boolean(),
        "preferred_cuisine": fake.random_element(elements=["Indian", "Chinese", "Italian", "Mexican"]),
        "total_orders": fake.random_int(min=1, max=50),
        "average_rating": round(fake.random_number(digits=1) / 2, 1)
    })

df_customers = pd.DataFrame(customers)
df_customers.to_csv("customers.csv", index=False)

customers

restaurants = []

for i in range(50):
    restaurants.append({
        "restaurant_id": i+1,
        "restaurant_name": fake.company(),
        "cuisine_type": fake.random_element(elements=["Indian", "Chinese", "Italian", "Mexican"]),
        "restaurant_location": fake.city(),
        "restaurant_owner_name": fake.name(),
        "average_delivery_time": fake.random_int(min=10, max=60),
        "restaurant_contact_number": fake.phone_number(),
        "restaurant_rating": round(random.uniform(1, 5), 1),
        "total_orders": fake.random_int(min=50, max=1000),
        "is_active": fake.boolean()
    })

df_restaurants = pd.DataFrame(restaurants)
df_restaurants.to_csv("restaurants.csv", index=False)

restaurants

orders = []

for i in range(200):
    fake.unique.clear()
    orders.append({
        "order_id": i + 1,
        "customer_id": fake.unique.random_int(1, 100),
        "restaurant_id": fake.unique.random_int(1, 50),
        "order_date": fake.date_this_year(),
        "delivery_time": fake.time_object(),
        "status": fake.random_element(elements=["Pending", "Delivered", "Cancelled"]),
        "total_amount": round(fake.random_number(digits=3), 2),
        "payment_mode": fake.random_element(elements=["Credit Card", "Cash", "UPI"]),
        "discount_applied": round(fake.random_number(digits=2), 2),
        "feedback_rating": round(fake.random.uniform(1, 5), 1)
    })

df_orders = pd.DataFrame(orders)
df_orders.to_csv("orders.csv", index=False)

orders

deliveries = []

for i in range(200):
    deliveries.append({
        "delivery_id": i+1,
        "order_id": random.randint(1, 200),
        "delivery_status": fake.random_element(elements=["On the way", "Delivered"]),
        "distance": round(random.uniform(1, 20), 1),
        "delivery_time": random.randint(10, 90),
        "estimated_time": random.randint(10, 90),
        "delivery_fee": round(random.uniform(10, 100), 2),
        "vehicle_type": fake.random_element(elements=["Bike", "Car"])
    })

df_deliveries = pd.DataFrame(deliveries)
df_deliveries.to_csv("deliveries.csv", index=False)

deliveries

pip install mysql-connector-python

pip install sqlalchemy

import sqlalchemy as sc

import mysql.connector
project=mysql.connector.connect(host="gateway01.us-west-2.prod.aws.tidbcloud.com",user="2b7jibPEQ1KmgLs.root",port=4000,password="RncdgdnrSS9NzYzI")

project

assign=project.cursor()

assign

assign.execute("create database zomato")

project=mysql.connector.connect(host="gateway01.us-west-2.prod.aws.tidbcloud.com",user="2b7jibPEQ1KmgLs.root",port=4000,password="RncdgdnrSS9NzYzI",database="zomato")

tables = [
    """CREATE TABLE IF NOT EXISTS customers (
        customer_id INT PRIMARY KEY,
        customer_name VARCHAR(100),
        customer_email VARCHAR(100),
        customer_phone VARCHAR(20),
        location VARCHAR(100),
        signup_date DATE,
        is_premium BOOLEAN,
        preferred_cuisine VARCHAR(50),
        total_orders INT,
        average_rating FLOAT
    )""",

    """CREATE TABLE IF NOT EXISTS restaurants (
        restaurant_id INT PRIMARY KEY,
        restaurant_name VARCHAR(100),
        cuisine_type VARCHAR(50),
        restaurant_location VARCHAR(100),
        restaurant_owner_name VARCHAR(100),
        average_delivery_time INT,
        contact_number VARCHAR(20),
        restaurant_rating FLOAT,
        total_orders INT,
        is_active BOOLEAN
    )""",

    """CREATE TABLE IF NOT EXISTS orders (
        order_id INT PRIMARY KEY,
        customer_id INT,
        restaurant_id INT,
        order_date DATE,
        delivery_time TIME,
        status VARCHAR(20),
        total_amount FLOAT,
        payment_mode VARCHAR(20),
        discount_applied FLOAT,
        feedback_rating FLOAT,
        FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
        FOREIGN KEY (restaurant_id) REFERENCES restaurants(restaurant_id)
    )""",

    """CREATE TABLE IF NOT EXISTS deliveries (
        delivery_id INT PRIMARY KEY,
        order_id INT,
        delivery_status VARCHAR(20),
        distance FLOAT,
        delivery_time INT,
        estimated_time INT,
        delivery_fee FLOAT,
        vehicle_type VARCHAR(20),
        FOREIGN KEY (order_id) REFERENCES orders(order_id)
    )"""
]

engine = sc.create_engine(f"mysql+mysqlconnector://2b7jibPEQ1KmgLs.root:RncdgdnrSS9NzYzI@gateway01.us-west-2.prod.aws.tidbcloud.com:4000/zomato")

project.database = "zomato"
assign = project.cursor()

project.commit()

df_customers = pd.read_csv("/content/customers.csv")
df_customers.to_sql("customers", engine, if_exists="replace", index=False)

df_deliveries = pd.read_csv("/content/deliveries.csv")
df_deliveries.to_sql("deliveries", engine, if_exists="replace", index=False)

df_orders = pd.read_csv("/content/orders.csv")
df_orders.to_sql("orders", engine, if_exists="replace", index=False)

df_restaurants = pd.read_csv("/content/restaurants.csv")
df_restaurants.to_sql("restaurants", engine, if_exists="replace", index=False)

class project:
  def __init__(self, host, user, password, port, database):
    self.host = host
    self.user = user
    self.password = password
    self.port = port
    self.database = database
    self.conn = None
    self.cursor = None
  def connect(self):
    self.conn = mysql.connector.connect(host = self.host, user = self.user, password = self.password, port = self.port, database = self.database)
    self.cursor = self.conn.cursor()
    print("connection success")
  def creat_table(self, table_query):
    self.cursor.execute(table_query)
    self.conn.commit()
    print("table creation successful")
  def insert_list_of_tuple(self, insert_query, list_tuple):
    self.cursor.executemany(insert_query, list_tuple)
    self.conn.commit()
    print("insertion successful")
  def get_all_records(self, table_name):
    if self.conn is None:
        self.connect()
    query = f"SELECT * FROM {table_name}"
    self.cursor.execute(query)
    records = self.cursor.fetchall()
    return records
  def get_filtered_records(self, table_name, condition):
    if self.conn is None:
        self.connect()
    query = f"SELECT * FROM {table_name} WHERE {condition}"
    self.cursor.execute(query)
    records = self.cursor.fetchall()
    return records

config = {"host":"gateway01.us-west-2.prod.aws.tidbcloud.com","user":"2b7jibPEQ1KmgLs.root","port":4000,"password":"RncdgdnrSS9NzYzI","database":"zomato"}
db_obj = project(**config)

customers = db_obj.get_all_records("customers")
print(customers[:5])

orders = db_obj.get_all_records("Orders")
print(orders[:5])

restaurants = db_obj.get_filtered_records("Restaurants", condition="restaurant_rating > 4.5")
print(restaurants[:5])

